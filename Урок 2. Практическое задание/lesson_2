"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""






def calculator ():
    operator = input('Введите символ операции -,+,/,*')
    if operator == '0':
        return 'END'
    else:
        if operator in "-+/*":
            try:
                number_one=int(input("введите первое число"))
                number_two=int(input("введите второе число"))

                if operator == "-":
                    oper = number_one - number_two
                    print(f"Получи и распешись {oper}")
                    return calculator()
                elif operator == "+":
                    oper = number_one + number_two
                    print(f"Получи и распешись {oper}")
                    return calculator()
                elif operator == "/":
                    try:
                        oper = number_one / number_two
                    except ZeroDivisionError:
                        print("на ноль не делим")
                    else:
                        print(f"Получи и распешись {oper}")
                    finally:
                        return calculator()
                elif operator == "*":
                    oper = number_one * number_two
                    print(f"Получи и распешись {oper}")
                    return calculator()
            except ValueError:
                print("Только Числа")
                return calculator()
        else:
            print("Это не инженерный калькулятор, будь проще)  ")
            return calculator()
calculator()











"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def chet_no_chet( number, chet=0, no_chet=0):
    if number == 0:
        return chet, no_chet
    else:
        cur = number % 10
        number = number // 10
        if cur % 2 == 0:
            chet += 1
        else:
            no_chet += 1
        return  chet_no_chet(number, chet, no_chet)
try:
    number = int(input('ваше число?'))
    print(f"четных и не четных {number}")
except ValueError:
    print(' Только числа')
    
    
    
    
    
    
"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
Не забудьте проверить и на числах, заканчивающихся нулем.
Пример:
Введите число, которое требуется перевернуть: 1230
Перевернутое число: 0321
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def sort(number):
    sort_number, numeral =divmod(number, 10)
    if sort_number == 0:
        return str(numeral)
    else:
        return str(numeral) + str(sort(sort_number))
number = int(input("что перевернем? "))
print(f'вот и твой результат: {sort(number)}')    





"""
4.	Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
Массив в этом задании строить не нужно!
Нужно решить без него!
Пример:
Введите количество элементов: 3
Количество элементов: 3, их сумма: 0.75
Подсказка:
Каждый очередной элемент в 2 раза меньше предыдущего и имеет противоположный знак
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def metod(i, number, count, sum ):
    if i == count:
        print(f"количество элементов{count} сумма {sum}")
    elif i < count:
        return metod(i+1, number / 2 * -1, count, sum+number)

try:
    count =int(input('введите число'))
    metod(0, 1, count, 0)
except ValueError:
    print(" Число, не строку")
    
    
    
    
"""
5. Квинси Квинси, Квинси
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
Пример:
32 - 33 - ! 34 - " 35 - No 36 - $ 37 - % 38 - No 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 -
62 - > 63 - ? 64 - No 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 -
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - No 91 -
92 - No 93 - No 94 - No 95 - No 96 - ' 97 - 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - стр. 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 
Подсказка:
Допускается исп-е встроенных ф-ций, в частности, chr()
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def row(val=32):
    if val == 128:
        return True
    print(f"{val}- {chr(val)}", end=' ')
    if (val-31)%10 == 0:
        print('\n')
    row(val+1)
row()



"""
6.	В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой
неудачной попытки должно сообщаться больше или меньше введенное пользователем
число, чем то, что загадано. Если за 10 попыток число не отгадано,
то вывести загаданное число.
Подсказка:
Базовый случай здесь - угадали число или закончились попытки
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


import random


def randoms(count, numb):
    print("Сыграем в угадайку у тебя 10 попыток")
    print(f"Попытка №{count}")
    answer = int(input("Введите от 0 до 100: "))
    if count == 10 or answer == numb:
        if answer == numb:
            print("Совершенно верно!")
        print(f"Загаданное число: {numb}")
    else:
        if answer > numb:
            print(f"горячо{numb}")
        else:
            print(f"холодно {numb}")
        randoms(count + 1, numb)


randoms(1, random.randint(0, 100))




"""
7.	Напишите программу, доказывающую или проверяющую, что для множества
натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
где n - любое натуральное число.
Рекурсия вам нужна для решения левой части выражения.
Полученный результат нужно просто сравнить с результатом в правой.
Пример:
No 5
1 х 2 х 3 х 5 х 5 (5'1)/2
Подсказка:
Правой части в рекурсии быть не должно!!! Необходимо сравнить результат, который даст рекурсивная ф-ция
со значением, полученным в правой части (здесь нужно просто подставить n и подсчитать)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""








def method(numb):
    if numb == 1:
        return numb
    else:
        return method(numb - 1) + numb


try:
    numb = int(input("Введите число "))
    if method(numb) == numb * (numb + 1) / 2:
        print('Will dan')
except ValueError:
    print("Только числа")
